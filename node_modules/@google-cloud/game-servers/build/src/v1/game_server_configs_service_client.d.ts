/// <reference types="node" />
import * as gax from 'google-gax';
import { Callback, Descriptors, ClientOptions, LROperation, PaginationCallback } from 'google-gax';
import { Transform } from 'stream';
import * as protos from '../../protos/protos';
/**
 *  The game server config configures the game servers in an Agones fleet.
 * @class
 * @memberof v1
 */
export declare class GameServerConfigsServiceClient {
    private _terminated;
    private _opts;
    private _gaxModule;
    private _gaxGrpc;
    private _protos;
    private _defaults;
    auth: gax.GoogleAuth;
    descriptors: Descriptors;
    innerApiCalls: {
        [name: string]: Function;
    };
    pathTemplates: {
        [name: string]: gax.PathTemplate;
    };
    operationsClient: gax.OperationsClient;
    gameServerConfigsServiceStub?: Promise<{
        [name: string]: Function;
    }>;
    /**
     * Construct an instance of GameServerConfigsServiceClient.
     *
     * @param {object} [options] - The configuration object. See the subsequent
     *   parameters for more details.
     * @param {object} [options.credentials] - Credentials object.
     * @param {string} [options.credentials.client_email]
     * @param {string} [options.credentials.private_key]
     * @param {string} [options.email] - Account email address. Required when
     *     using a .pem or .p12 keyFilename.
     * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
     *     .p12 key downloaded from the Google Developers Console. If you provide
     *     a path to a JSON file, the projectId option below is not necessary.
     *     NOTE: .pem and .p12 require you to specify options.email as well.
     * @param {number} [options.port] - The port on which to connect to
     *     the remote host.
     * @param {string} [options.projectId] - The project ID from the Google
     *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
     *     the environment variable GCLOUD_PROJECT for your project ID. If your
     *     app is running in an environment which supports
     *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
     *     your project ID will be detected automatically.
     * @param {string} [options.apiEndpoint] - The domain name of the
     *     API remote host.
     */
    constructor(opts?: ClientOptions);
    /**
     * Initialize the client.
     * Performs asynchronous operations (such as authentication) and prepares the client.
     * This function will be called automatically when any class method is called for the
     * first time, but if you need to initialize it before calling an actual method,
     * feel free to call initialize() directly.
     *
     * You can await on this method if you want to make sure the client is initialized.
     *
     * @returns {Promise} A promise that resolves to an authenticated service stub.
     */
    initialize(): Promise<{
        [name: string]: Function;
    }>;
    /**
     * The DNS address for this API service.
     */
    static get servicePath(): string;
    /**
     * The DNS address for this API service - same as servicePath(),
     * exists for compatibility reasons.
     */
    static get apiEndpoint(): string;
    /**
     * The port for this API service.
     */
    static get port(): number;
    /**
     * The scopes needed to make gRPC calls for every method defined
     * in this service.
     */
    static get scopes(): string[];
    getProjectId(): Promise<string>;
    getProjectId(callback: Callback<string, undefined, undefined>): void;
    getGameServerConfig(request: protos.google.cloud.gaming.v1.IGetGameServerConfigRequest, options?: gax.CallOptions): Promise<[protos.google.cloud.gaming.v1.IGameServerConfig, protos.google.cloud.gaming.v1.IGetGameServerConfigRequest | undefined, {} | undefined]>;
    getGameServerConfig(request: protos.google.cloud.gaming.v1.IGetGameServerConfigRequest, options: gax.CallOptions, callback: Callback<protos.google.cloud.gaming.v1.IGameServerConfig, protos.google.cloud.gaming.v1.IGetGameServerConfigRequest | null | undefined, {} | null | undefined>): void;
    getGameServerConfig(request: protos.google.cloud.gaming.v1.IGetGameServerConfigRequest, callback: Callback<protos.google.cloud.gaming.v1.IGameServerConfig, protos.google.cloud.gaming.v1.IGetGameServerConfigRequest | null | undefined, {} | null | undefined>): void;
    createGameServerConfig(request: protos.google.cloud.gaming.v1.ICreateGameServerConfigRequest, options?: gax.CallOptions): Promise<[LROperation<protos.google.cloud.gaming.v1.IGameServerConfig, protos.google.cloud.gaming.v1.IOperationMetadata>, protos.google.longrunning.IOperation | undefined, {} | undefined]>;
    createGameServerConfig(request: protos.google.cloud.gaming.v1.ICreateGameServerConfigRequest, options: gax.CallOptions, callback: Callback<LROperation<protos.google.cloud.gaming.v1.IGameServerConfig, protos.google.cloud.gaming.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    createGameServerConfig(request: protos.google.cloud.gaming.v1.ICreateGameServerConfigRequest, callback: Callback<LROperation<protos.google.cloud.gaming.v1.IGameServerConfig, protos.google.cloud.gaming.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by the createGameServerConfig() method.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *
     * @example:
     *   const decodedOperation = await checkCreateGameServerConfigProgress(name);
     *   console.log(decodedOperation.result);
     *   console.log(decodedOperation.done);
     *   console.log(decodedOperation.metadata);
     *
     */
    checkCreateGameServerConfigProgress(name: string): Promise<LROperation<protos.google.cloud.gaming.v1.GameServerConfig, protos.google.cloud.gaming.v1.OperationMetadata>>;
    deleteGameServerConfig(request: protos.google.cloud.gaming.v1.IDeleteGameServerConfigRequest, options?: gax.CallOptions): Promise<[LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.gaming.v1.IOperationMetadata>, protos.google.longrunning.IOperation | undefined, {} | undefined]>;
    deleteGameServerConfig(request: protos.google.cloud.gaming.v1.IDeleteGameServerConfigRequest, options: gax.CallOptions, callback: Callback<LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.gaming.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    deleteGameServerConfig(request: protos.google.cloud.gaming.v1.IDeleteGameServerConfigRequest, callback: Callback<LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.gaming.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by the deleteGameServerConfig() method.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *
     * @example:
     *   const decodedOperation = await checkDeleteGameServerConfigProgress(name);
     *   console.log(decodedOperation.result);
     *   console.log(decodedOperation.done);
     *   console.log(decodedOperation.metadata);
     *
     */
    checkDeleteGameServerConfigProgress(name: string): Promise<LROperation<protos.google.protobuf.Empty, protos.google.cloud.gaming.v1.OperationMetadata>>;
    listGameServerConfigs(request: protos.google.cloud.gaming.v1.IListGameServerConfigsRequest, options?: gax.CallOptions): Promise<[protos.google.cloud.gaming.v1.IGameServerConfig[], protos.google.cloud.gaming.v1.IListGameServerConfigsRequest | null, protos.google.cloud.gaming.v1.IListGameServerConfigsResponse]>;
    listGameServerConfigs(request: protos.google.cloud.gaming.v1.IListGameServerConfigsRequest, options: gax.CallOptions, callback: PaginationCallback<protos.google.cloud.gaming.v1.IListGameServerConfigsRequest, protos.google.cloud.gaming.v1.IListGameServerConfigsResponse | null | undefined, protos.google.cloud.gaming.v1.IGameServerConfig>): void;
    listGameServerConfigs(request: protos.google.cloud.gaming.v1.IListGameServerConfigsRequest, callback: PaginationCallback<protos.google.cloud.gaming.v1.IListGameServerConfigsRequest, protos.google.cloud.gaming.v1.IListGameServerConfigsResponse | null | undefined, protos.google.cloud.gaming.v1.IGameServerConfig>): void;
    /**
     * Equivalent to {@link listGameServerConfigs}, but returns a NodeJS Stream object.
     *
     * This fetches the paged responses for {@link listGameServerConfigs} continuously
     * and invokes the callback registered for 'data' event for each element in the
     * responses.
     *
     * The returned object has 'end' method when no more elements are required.
     *
     * autoPaginate option will be ignored.
     *
     * @see {@link https://nodejs.org/api/stream.html}
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The parent resource name. Uses the form:
     *
     *   `projects/{project}/locations/{location}/gameServerDeployments/{deployment}/configs/*`.
     * @param {number} [request.pageSize]
     *   Optional. The maximum number of items to return.  If unspecified, server
     *   will pick an appropriate default. Server may return fewer items than
     *   requested. A caller should only rely on response's
     *   {@link google.cloud.gaming.v1.ListGameServerConfigsResponse.next_page_token|next_page_token} to
     *   determine if there are more GameServerConfigs left to be queried.
     * @param {string} [request.pageToken]
     *   Optional. The next_page_token value returned from a previous list request, if any.
     * @param {string} [request.filter]
     *   Optional. The filter to apply to list results.
     * @param {string} [request.orderBy]
     *   Optional. Specifies the ordering of results following syntax at
     *   https://cloud.google.com/apis/design/design_patterns#sorting_order.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing [GameServerConfig]{@link google.cloud.gaming.v1.GameServerConfig} on 'data' event.
     */
    listGameServerConfigsStream(request?: protos.google.cloud.gaming.v1.IListGameServerConfigsRequest, options?: gax.CallOptions): Transform;
    /**
     * Equivalent to {@link listGameServerConfigs}, but returns an iterable object.
     *
     * for-await-of syntax is used with the iterable to recursively get response element on-demand.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The parent resource name. Uses the form:
     *
     *   `projects/{project}/locations/{location}/gameServerDeployments/{deployment}/configs/*`.
     * @param {number} [request.pageSize]
     *   Optional. The maximum number of items to return.  If unspecified, server
     *   will pick an appropriate default. Server may return fewer items than
     *   requested. A caller should only rely on response's
     *   {@link google.cloud.gaming.v1.ListGameServerConfigsResponse.next_page_token|next_page_token} to
     *   determine if there are more GameServerConfigs left to be queried.
     * @param {string} [request.pageToken]
     *   Optional. The next_page_token value returned from a previous list request, if any.
     * @param {string} [request.filter]
     *   Optional. The filter to apply to list results.
     * @param {string} [request.orderBy]
     *   Optional. Specifies the ordering of results following syntax at
     *   https://cloud.google.com/apis/design/design_patterns#sorting_order.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that conforms to @link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols.
     */
    listGameServerConfigsAsync(request?: protos.google.cloud.gaming.v1.IListGameServerConfigsRequest, options?: gax.CallOptions): AsyncIterable<protos.google.cloud.gaming.v1.IGameServerConfig>;
    /**
     * Return a fully-qualified gameServerCluster resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} realm
     * @param {string} cluster
     * @returns {string} Resource name string.
     */
    gameServerClusterPath(project: string, location: string, realm: string, cluster: string): string;
    /**
     * Parse the project from GameServerCluster resource.
     *
     * @param {string} gameServerClusterName
     *   A fully-qualified path representing GameServerCluster resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromGameServerClusterName(gameServerClusterName: string): string | number;
    /**
     * Parse the location from GameServerCluster resource.
     *
     * @param {string} gameServerClusterName
     *   A fully-qualified path representing GameServerCluster resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromGameServerClusterName(gameServerClusterName: string): string | number;
    /**
     * Parse the realm from GameServerCluster resource.
     *
     * @param {string} gameServerClusterName
     *   A fully-qualified path representing GameServerCluster resource.
     * @returns {string} A string representing the realm.
     */
    matchRealmFromGameServerClusterName(gameServerClusterName: string): string | number;
    /**
     * Parse the cluster from GameServerCluster resource.
     *
     * @param {string} gameServerClusterName
     *   A fully-qualified path representing GameServerCluster resource.
     * @returns {string} A string representing the cluster.
     */
    matchClusterFromGameServerClusterName(gameServerClusterName: string): string | number;
    /**
     * Return a fully-qualified gameServerConfig resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} deployment
     * @param {string} config
     * @returns {string} Resource name string.
     */
    gameServerConfigPath(project: string, location: string, deployment: string, config: string): string;
    /**
     * Parse the project from GameServerConfig resource.
     *
     * @param {string} gameServerConfigName
     *   A fully-qualified path representing GameServerConfig resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromGameServerConfigName(gameServerConfigName: string): string | number;
    /**
     * Parse the location from GameServerConfig resource.
     *
     * @param {string} gameServerConfigName
     *   A fully-qualified path representing GameServerConfig resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromGameServerConfigName(gameServerConfigName: string): string | number;
    /**
     * Parse the deployment from GameServerConfig resource.
     *
     * @param {string} gameServerConfigName
     *   A fully-qualified path representing GameServerConfig resource.
     * @returns {string} A string representing the deployment.
     */
    matchDeploymentFromGameServerConfigName(gameServerConfigName: string): string | number;
    /**
     * Parse the config from GameServerConfig resource.
     *
     * @param {string} gameServerConfigName
     *   A fully-qualified path representing GameServerConfig resource.
     * @returns {string} A string representing the config.
     */
    matchConfigFromGameServerConfigName(gameServerConfigName: string): string | number;
    /**
     * Return a fully-qualified gameServerDeployment resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} deployment
     * @returns {string} Resource name string.
     */
    gameServerDeploymentPath(project: string, location: string, deployment: string): string;
    /**
     * Parse the project from GameServerDeployment resource.
     *
     * @param {string} gameServerDeploymentName
     *   A fully-qualified path representing GameServerDeployment resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromGameServerDeploymentName(gameServerDeploymentName: string): string | number;
    /**
     * Parse the location from GameServerDeployment resource.
     *
     * @param {string} gameServerDeploymentName
     *   A fully-qualified path representing GameServerDeployment resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromGameServerDeploymentName(gameServerDeploymentName: string): string | number;
    /**
     * Parse the deployment from GameServerDeployment resource.
     *
     * @param {string} gameServerDeploymentName
     *   A fully-qualified path representing GameServerDeployment resource.
     * @returns {string} A string representing the deployment.
     */
    matchDeploymentFromGameServerDeploymentName(gameServerDeploymentName: string): string | number;
    /**
     * Return a fully-qualified gameServerDeploymentRollout resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} deployment
     * @returns {string} Resource name string.
     */
    gameServerDeploymentRolloutPath(project: string, location: string, deployment: string): string;
    /**
     * Parse the project from GameServerDeploymentRollout resource.
     *
     * @param {string} gameServerDeploymentRolloutName
     *   A fully-qualified path representing GameServerDeploymentRollout resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromGameServerDeploymentRolloutName(gameServerDeploymentRolloutName: string): string | number;
    /**
     * Parse the location from GameServerDeploymentRollout resource.
     *
     * @param {string} gameServerDeploymentRolloutName
     *   A fully-qualified path representing GameServerDeploymentRollout resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromGameServerDeploymentRolloutName(gameServerDeploymentRolloutName: string): string | number;
    /**
     * Parse the deployment from GameServerDeploymentRollout resource.
     *
     * @param {string} gameServerDeploymentRolloutName
     *   A fully-qualified path representing GameServerDeploymentRollout resource.
     * @returns {string} A string representing the deployment.
     */
    matchDeploymentFromGameServerDeploymentRolloutName(gameServerDeploymentRolloutName: string): string | number;
    /**
     * Return a fully-qualified realm resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} realm
     * @returns {string} Resource name string.
     */
    realmPath(project: string, location: string, realm: string): string;
    /**
     * Parse the project from Realm resource.
     *
     * @param {string} realmName
     *   A fully-qualified path representing Realm resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromRealmName(realmName: string): string | number;
    /**
     * Parse the location from Realm resource.
     *
     * @param {string} realmName
     *   A fully-qualified path representing Realm resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromRealmName(realmName: string): string | number;
    /**
     * Parse the realm from Realm resource.
     *
     * @param {string} realmName
     *   A fully-qualified path representing Realm resource.
     * @returns {string} A string representing the realm.
     */
    matchRealmFromRealmName(realmName: string): string | number;
    /**
     * Terminate the GRPC channel and close the client.
     *
     * The client will no longer be usable and all future behavior is undefined.
     */
    close(): Promise<void>;
}
